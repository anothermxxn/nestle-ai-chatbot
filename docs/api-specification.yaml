openapi: 3.0.3
info:
  title: Nestle AI Chatbot API
  description: |
    AI-based chatbot API for the Made with Nestle website. 
    
    This API provides intelligent conversational search capabilities over Nestle content,
    including recipe recommendations, product information, cooking tips, and nutrition guidance.
    
    ## Features
    - **Context-aware conversations** with session management
    - **GraphRAG-enhanced search** with entity relationships
    - **Multi-modal content search** across recipes, brands, and topics
    - **Real-time WebSocket communication**
    - **Entity and relationship management** via graph database
    
  version: 1.0.0
  license:
    name: Apache 2.0
    url: https://opensource.org/license/apache-2-0

tags:
  - name: Health
    description: API health and status endpoints
  - name: Chat
    description: Conversational AI chat endpoints
  - name: Sessions
    description: Chat session management
  - name: WebSocket
    description: Real-time WebSocket communication
  - name: Graph
    description: Entity and relationship management
  - name: Search
    description: Content search and discovery

paths:
  # Health Endpoints
  /:
    get:
      tags: [Health]
      summary: Root endpoint
      description: Returns API status and environment information
      responses:
        '200':
          description: API is healthy and running
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "healthy"
                  message:
                    type: string
                    example: "Nestle AI Chatbot API is running"
                  environment:
                    type: string
                    example: "development"

  /health:
    get:
      tags: [Health]
      summary: Health check
      description: Health check endpoint for monitoring API availability
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "healthy"
                  environment:
                    type: string
                    example: "development"

  # Chat Endpoints
  /chat/search:
    post:
      tags: [Chat]
      summary: Chat search
      description: |
        Perform context-aware search and generate conversational response.
        This is the main chat endpoint that combines search with conversation context.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatRequest'
      responses:
        '200':
          description: Successful chat response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatResponse'
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /chat/recipes:
    post:
      tags: [Chat]
      summary: Get recipe suggestions
      description: Get recipe suggestions for a specific ingredient with conversation context
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RecipeRequest'
      responses:
        '200':
          description: Recipe suggestions response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatResponse'

  /chat/products:
    post:
      tags: [Chat]
      summary: Get product information
      description: Get information about a specific Nestle product with conversation context
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductRequest'
      responses:
        '200':
          description: Product information response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatResponse'

  /chat/cooking-tips:
    post:
      tags: [Chat]
      summary: Get cooking tips
      description: Get cooking tips and advice with conversation context
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CookingTipsRequest'
      responses:
        '200':
          description: Cooking tips response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatResponse'

  /chat/nutrition:
    post:
      tags: [Chat]
      summary: Get nutrition information
      description: Get nutritional information about a food item or Nestle product
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NutritionRequest'
      responses:
        '200':
          description: Nutrition information response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatResponse'

  /chat/health:
    get:
      tags: [Chat]
      summary: Chat service health
      description: Check health status of chat service components
      responses:
        '200':
          description: Chat service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "healthy"
                  components:
                    type: object
                    properties:
                      search_client:
                        type: string
                        example: "connected"
                      graph_client:
                        type: string
                        example: "connected"
                      session_manager:
                        type: string
                        example: "active"

  # Session Management Endpoints
  /chat/session:
    post:
      tags: [Sessions]
      summary: Create chat session
      description: Create a new conversation session for context management
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SessionRequest'
      responses:
        '200':
          description: Session created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionResponse'

  /chat/session/{session_id}:
    get:
      tags: [Sessions]
      summary: Get session history
      description: Retrieve conversation history for a specific session
      parameters:
        - name: session_id
          in: path
          required: true
          description: Session identifier
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Session history retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionHistoryResponse'
        '404':
          description: Session not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /chat/session/{session_id}/delete:
    post:
      tags: [Sessions]
      summary: Delete chat session
      description: Delete a conversation session and its history
      parameters:
        - name: session_id
          in: path
          required: true
          description: Session identifier
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Session deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Session deleted successfully"
                  session_id:
                    type: string
                    example: "550e8400-e29b-41d4-a716-446655440000"

  /chat/sessions/stats:
    get:
      tags: [Sessions]
      summary: Get session statistics
      description: Get statistics about all active sessions
      responses:
        '200':
          description: Session statistics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionStatsResponse'

  # Graph Endpoints
  /graph/health:
    get:
      tags: [Graph]
      summary: Graph service health
      description: Check health status of graph database service
      responses:
        '200':
          description: Graph service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "healthy"
                  database:
                    type: string
                    example: "connected"

  /graph/entity-types:
    get:
      tags: [Graph]
      summary: Get entity types
      description: Get list of all supported entity types
      responses:
        '200':
          description: List of entity types
          content:
            application/json:
              schema:
                type: object
                properties:
                  entity_types:
                    type: array
                    items:
                      type: object
                      properties:
                        type:
                          type: string
                          example: "Brand"
                        description:
                          type: string
                          example: "Nestle brand entities"

  /graph/relationship-types:
    get:
      tags: [Graph]
      summary: Get relationship types
      description: Get list of all supported relationship types
      responses:
        '200':
          description: List of relationship types
          content:
            application/json:
              schema:
                type: object
                properties:
                  relationship_types:
                    type: array
                    items:
                      type: object
                      properties:
                        type:
                          type: string
                          example: "BELONGS_TO"
                        description:
                          type: string
                          example: "Product belongs to brand"

  /graph/entities:
    post:
      tags: [Graph]
      summary: Create entity
      description: Create a new entity in the graph database
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateEntityRequest'
      responses:
        '201':
          description: Entity created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityResponse'
        '400':
          description: Invalid entity data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    get:
      tags: [Graph]
      summary: List entities
      description: List entities with optional filtering
      parameters:
        - name: entity_type
          in: query
          required: false
          description: Filter by entity type
          schema:
            type: string
            enum: [Brand, Topic, Product, Recipe]
        - name: limit
          in: query
          required: false
          description: Maximum number of entities to return
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: offset
          in: query
          required: false
          description: Number of entities to skip
          schema:
            type: integer
            minimum: 0
            default: 0
      responses:
        '200':
          description: List of entities
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityListResponse'

  /graph/entities/{entity_id}:
    get:
      tags: [Graph]
      summary: Get entity
      description: Get a specific entity by ID
      parameters:
        - name: entity_id
          in: path
          required: true
          description: Entity identifier
          schema:
            type: string
      responses:
        '200':
          description: Entity details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityResponse'
        '404':
          description: Entity not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      tags: [Graph]
      summary: Update entity
      description: Update an existing entity
      parameters:
        - name: entity_id
          in: path
          required: true
          description: Entity identifier
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateEntityRequest'
      responses:
        '200':
          description: Entity updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityResponse'

    delete:
      tags: [Graph]
      summary: Delete entity
      description: Delete an entity from the graph database
      parameters:
        - name: entity_id
          in: path
          required: true
          description: Entity identifier
          schema:
            type: string
      responses:
        '200':
          description: Entity deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Entity deleted successfully"

  /graph/entities/{entity_id}/relationships:
    get:
      tags: [Graph]
      summary: Get entity relationships
      description: Get all relationships for a specific entity
      parameters:
        - name: entity_id
          in: path
          required: true
          description: Entity identifier
          schema:
            type: string
        - name: direction
          in: query
          required: false
          description: Direction of relationships
          schema:
            type: string
            enum: [incoming, outgoing, both]
            default: both
      responses:
        '200':
          description: Entity relationships
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RelationshipListResponse'

  /graph/relationships:
    post:
      tags: [Graph]
      summary: Create relationship
      description: Create a new relationship between entities
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRelationshipRequest'
      responses:
        '201':
          description: Relationship created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RelationshipResponse'

    get:
      tags: [Graph]
      summary: List relationships
      description: List relationships with optional filtering
      parameters:
        - name: relationship_type
          in: query
          required: false
          description: Filter by relationship type
          schema:
            type: string
        - name: from_entity_id
          in: query
          required: false
          description: Filter by source entity
          schema:
            type: string
        - name: to_entity_id
          in: query
          required: false
          description: Filter by target entity
          schema:
            type: string
        - name: limit
          in: query
          required: false
          description: Maximum number of relationships to return
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        '200':
          description: List of relationships
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RelationshipListResponse'

  /graph/relationships/{relationship_id}:
    get:
      tags: [Graph]
      summary: Get relationship
      description: Get a specific relationship by ID
      parameters:
        - name: relationship_id
          in: path
          required: true
          description: Relationship identifier
          schema:
            type: string
      responses:
        '200':
          description: Relationship details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RelationshipResponse'

    put:
      tags: [Graph]
      summary: Update relationship
      description: Update an existing relationship
      parameters:
        - name: relationship_id
          in: path
          required: true
          description: Relationship identifier
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRelationshipRequest'
      responses:
        '200':
          description: Relationship updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RelationshipResponse'

    delete:
      tags: [Graph]
      summary: Delete relationship
      description: Delete a relationship from the graph database
      parameters:
        - name: relationship_id
          in: path
          required: true
          description: Relationship identifier
          schema:
            type: string
      responses:
        '200':
          description: Relationship deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Relationship deleted successfully"

# WebSocket endpoints are documented separately as they don't fit standard OpenAPI patterns
# See websocket-documentation.md for WebSocket API details

components:
  schemas:
    # Chat Request/Response Schemas
    ChatRequest:
      type: object
      required:
        - query
      properties:
        query:
          type: string
          description: User's question or search query
          example: "What are some easy chocolate chip cookie recipes?"
        session_id:
          type: string
          format: uuid
          description: Optional session ID for conversation context
          example: "550e8400-e29b-41d4-a716-446655440000"
        content_type:
          type: string
          description: Filter by content type
          enum: [recipe, brand, topic, general]
          example: "recipe"
        brand:
          type: string
          description: Filter by brand
          example: "NESTLE"
        keywords:
          type: array
          items:
            type: string
          description: Filter by keywords
          example: ["chocolate", "cookies", "baking"]
        top_search_results:
          type: integer
          description: Number of search results to use as context
          minimum: 1
          maximum: 20
          default: 5

    ChatResponse:
      type: object
      properties:
        answer:
          type: string
          description: Generated response from the AI
          example: "Here are some delicious chocolate chip cookie recipes from Nestle..."
        sources:
          type: array
          items:
            $ref: '#/components/schemas/SearchResult'
          description: Source documents used to generate the response
        source_links:
          type: array
          items:
            $ref: '#/components/schemas/SourceLink'
          description: Formatted source links for frontend display
        search_results_count:
          type: integer
          description: Number of search results found
          example: 5
        query:
          type: string
          description: Original user query
          example: "chocolate chip cookie recipes"
        session_id:
          type: string
          format: uuid
          description: Session ID for this conversation
        conversation_context:
          type: string
          description: Summary of conversation context
        filters_applied:
          type: object
          properties:
            content_type:
              type: string
            brand:
              type: string
            keywords:
              type: array
              items:
                type: string
        graphrag_enhanced:
          type: boolean
          description: Whether GraphRAG was used for enhanced context
        combined_relevance_score:
          type: number
          description: Combined relevance score for the response
        session_stats:
          type: object
          properties:
            total_messages:
              type: integer
            total_queries:
              type: integer
            total_responses:
              type: integer

    SearchResult:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the content chunk
        content:
          type: string
          description: Text content of the result
        page_title:
          type: string
          description: Title of the source page
        section_title:
          type: string
          description: Section title within the page
        url:
          type: string
          format: uri
          description: Source URL
        brand:
          type: string
          description: Associated brand
        content_type:
          type: string
          description: Type of content
        keywords:
          type: array
          items:
            type: string
          description: Keywords associated with this content
        score:
          type: number
          description: Relevance score

    SourceLink:
      type: object
      properties:
        id:
          type: integer
          description: Reference number for the source
        title:
          type: string
          description: Display title for the source
        url:
          type: string
          format: uri
          description: Source URL
        snippet:
          type: string
          description: Brief snippet of the content
        domain:
          type: string
          description: Domain of the source

    RecipeRequest:
      type: object
      required:
        - ingredient
      properties:
        ingredient:
          type: string
          description: Ingredient to search recipes for
          example: "chocolate chips"
        session_id:
          type: string
          format: uuid
          description: Optional session ID

    ProductRequest:
      type: object
      required:
        - product_name
      properties:
        product_name:
          type: string
          description: Name of the product to get information about
          example: "KitKat"
        session_id:
          type: string
          format: uuid
          description: Optional session ID

    CookingTipsRequest:
      type: object
      required:
        - topic
      properties:
        topic:
          type: string
          description: Cooking topic or technique
          example: "baking cookies"
        session_id:
          type: string
          format: uuid
          description: Optional session ID

    NutritionRequest:
      type: object
      required:
        - food_item
      properties:
        food_item:
          type: string
          description: Food item or product to get nutrition info for
          example: "dark chocolate"
        session_id:
          type: string
          format: uuid
          description: Optional session ID

    SearchResponse:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/SearchResult'
        total_count:
          type: integer
          description: Total number of results found
        query:
          type: string
          description: Original search query
        filters_applied:
          type: object
          description: Filters that were applied to the search

    # Session Management Schemas
    SessionRequest:
      type: object
      properties:
        session_id:
          type: string
          format: uuid
          description: Optional custom session ID

    SessionResponse:
      type: object
      properties:
        session_id:
          type: string
          format: uuid
          description: Created session ID
        created_at:
          type: string
          format: date-time
          description: Session creation timestamp

    SessionHistoryResponse:
      type: object
      properties:
        session_id:
          type: string
          format: uuid
        created_at:
          type: string
          format: date-time
        last_activity:
          type: string
          format: date-time
        message_count:
          type: integer
        messages:
          type: array
          items:
            $ref: '#/components/schemas/ChatMessage'
        conversation_summary:
          type: string
        search_context:
          $ref: '#/components/schemas/SearchContext'
        metadata:
          type: object

    ChatMessage:
      type: object
      properties:
        role:
          type: string
          enum: [user, assistant]
        content:
          type: string
        timestamp:
          type: string
          format: date-time
        metadata:
          type: object

    SearchContext:
      type: object
      properties:
        recent_topics:
          type: array
          items:
            type: string
        preferred_content_types:
          type: array
          items:
            type: string
        mentioned_brands:
          type: array
          items:
            type: string
        mentioned_products:
          type: array
          items:
            type: string
        conversation_themes:
          type: array
          items:
            type: string

    SessionStatsResponse:
      type: object
      properties:
        total_sessions:
          type: integer
        total_messages:
          type: integer
        avg_messages_per_session:
          type: number
        oldest_session:
          type: object
          properties:
            id:
              type: string
            created_at:
              type: string
              format: date-time
        newest_session:
          type: object
          properties:
            id:
              type: string
            created_at:
              type: string
              format: date-time

    # Graph Database Schemas
    CreateEntityRequest:
      type: object
      required:
        - entity_type
        - properties
      properties:
        entity_type:
          type: string
          enum: [Brand, Topic, Product, Recipe]
        properties:
          type: object
          description: Entity-specific properties
        is_user_created:
          type: boolean
          default: false

    UpdateEntityRequest:
      type: object
      properties:
        properties:
          type: object
          description: Properties to update

    EntityResponse:
      type: object
      properties:
        id:
          type: string
        entity_type:
          type: string
        properties:
          type: object
        is_user_created:
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    EntityListResponse:
      type: object
      properties:
        entities:
          type: array
          items:
            $ref: '#/components/schemas/EntityResponse'
        total_count:
          type: integer
        limit:
          type: integer
        offset:
          type: integer

    CreateRelationshipRequest:
      type: object
      required:
        - from_entity_id
        - to_entity_id
        - relationship_type
      properties:
        from_entity_id:
          type: string
        to_entity_id:
          type: string
        relationship_type:
          type: string
          enum: [BELONGS_TO, MENTIONS, CONTAINS, RELATED_TO, FEATURED_IN]
        properties:
          type: object
        weight:
          type: number
          default: 1.0
        is_user_created:
          type: boolean
          default: false

    UpdateRelationshipRequest:
      type: object
      properties:
        properties:
          type: object
        weight:
          type: number

    RelationshipResponse:
      type: object
      properties:
        id:
          type: string
        relationship_type:
          type: string
        from_entity_id:
          type: string
        to_entity_id:
          type: string
        properties:
          type: object
        weight:
          type: number
        is_user_created:
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    RelationshipListResponse:
      type: object
      properties:
        relationships:
          type: array
          items:
            $ref: '#/components/schemas/RelationshipResponse'
        total_count:
          type: integer
        limit:
          type: integer
        offset:
          type: integer

    # Common Error Response
    ErrorResponse:
      type: object
      properties:
        detail:
          type: string
          description: Error message
          example: "Invalid request parameters"
        error_code:
          type: string
          description: Machine-readable error code
          example: "INVALID_PARAMETERS"
        timestamp:
          type: string
          format: date-time
          description: Error timestamp

  # Security Schemes (for future use)
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
      description: API key for authentication (not currently implemented)

# Global security (currently empty - no auth required)
security: [] 