openapi: 3.0.3
info:
  title: Nestle AI Chatbot API
  description: |
    AI-based chatbot API for the Made with Nestle website. 
    
    This API provides intelligent conversational search capabilities over Nestle content,
    including recipe recommendations, product information, cooking tips, and nutrition guidance.
    
    ## Features
    - **Context-aware conversations** with session management
    - **GraphRAG-enhanced search** with entity relationships
    - **Multi-modal content search** across recipes, brands, and topics
    - **Entity and relationship management** via graph database
    - **Purchase assistance** with store locator and Amazon product integration
    - **Count statistics** for data analysis
    
  version: 1.0.0
  license:
    name: Apache 2.0
    url: https://opensource.org/license/apache-2-0

tags:
  - name: Health
    description: API health and status endpoints
  - name: Chat
    description: Conversational AI chat endpoints
  - name: Sessions
    description: Chat session management
  - name: Graph
    description: Entity and relationship management
  - name: Validation
    description: Entity and relationship validation
  - name: Statistics
    description: Count statistics and analytics

paths:
  # Health Endpoints
  /:
    get:
      tags: [Health]
      summary: Root endpoint
      description: Returns API status and environment information
      responses:
        '200':
          description: API is healthy and running
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "healthy"
                  message:
                    type: string
                    example: "Nestle AI Chatbot API is running"
                  environment:
                    type: string
                    example: "development"

  /health:
    get:
      tags: [Health]
      summary: Health check
      description: Health check endpoint for monitoring API availability
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "healthy"
                  environment:
                    type: string
                    example: "development"

  # Chat Endpoints
  /chat/search:
    post:
      tags: [Chat]
      summary: Chat search
      description: |
        Perform context-aware search and generate conversational response.
        This is the main chat endpoint that combines search with conversation context.
        Supports purchase assistance with store locator and Amazon product integration.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatRequest'
      responses:
        '200':
          description: Successful chat response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatResponse'
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /chat/health:
    get:
      tags: [Chat]
      summary: Chat service health
      description: Check health status of chat service components
      responses:
        '200':
          description: Chat service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "healthy"
                  service:
                    type: string
                    example: "Nestle Chat API"
                  version:
                    type: string
                    example: "1.0.0"
                  timestamp:
                    type: string
                    format: date-time
                  dependencies:
                    type: object
                    properties:
                      azure_openai:
                        type: string
                        example: "connected"
                      azure_search:
                        type: string
                        example: "connected"
                      session_manager:
                        type: string
                        example: "active"
                  session_stats:
                    type: object

  # Session Management Endpoints
  /chat/sessions:
    post:
      tags: [Sessions]
      summary: Create chat session
      description: Create a new conversation session for context management
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SessionRequest'
      responses:
        '200':
          description: Session created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionResponse'

  /chat/sessions/{session_id}/history:
    get:
      tags: [Sessions]
      summary: Get session history
      description: Retrieve conversation history for a specific session
      parameters:
        - name: session_id
          in: path
          required: true
          description: Session identifier
          schema:
            type: string
        - name: limit
          in: query
          required: false
          description: Maximum number of recent messages
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        '200':
          description: Session history retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConversationHistoryResponse'
        '404':
          description: Session not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /chat/sessions/{session_id}:
    delete:
      tags: [Sessions]
      summary: Delete chat session
      description: Delete a conversation session and its history
      parameters:
        - name: session_id
          in: path
          required: true
          description: Session identifier
          schema:
            type: string
      responses:
        '200':
          description: Session deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionResponse'

  /chat/sessions/stats:
    get:
      tags: [Sessions]
      summary: Get session statistics
      description: Get statistics about all active sessions
      responses:
        '200':
          description: Session statistics
          content:
            application/json:
              schema:
                type: object
                properties:
                  session_statistics:
                    type: object
                  timestamp:
                    type: string
                    format: date-time

  # Graph Endpoints
  /api/graph/health:
    get:
      tags: [Graph]
      summary: Graph service health
      description: Check health status of graph database service
      responses:
        '200':
          description: Graph service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "healthy"
                  service:
                    type: string
                    example: "graph"

  /api/graph/schema/entity-types:
    get:
      tags: [Graph]
      summary: Get entity types and schemas
      description: Get list of all supported entity types with their schemas
      responses:
        '200':
          description: Entity types and schemas
          content:
            application/json:
              schema:
                type: object
                properties:
                  entity_types:
                    type: array
                    items:
                      type: string
                    example: ["Brand", "Topic", "Product", "Recipe"]
                  schemas:
                    type: object
                    additionalProperties:
                      type: object
                      properties:
                        system_created:
                          type: object
                        user_created:
                          type: object

  /api/graph/schema/relationship-types:
    get:
      tags: [Graph]
      summary: Get relationship types and schemas
      description: Get list of all supported relationship types with schema information
      responses:
        '200':
          description: Relationship types and schema
          content:
            application/json:
              schema:
                type: object
                properties:
                  relationship_types:
                    type: array
                    items:
                      type: string
                  schema:
                    type: object

  # Validation Endpoints
  /api/graph/validate/entity:
    post:
      tags: [Validation]
      summary: Validate entity
      description: Validate entity properties before creation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ValidationRequest'
      responses:
        '200':
          description: Validation result
          content:
            application/json:
              schema:
                type: object
                properties:
                  valid:
                    type: boolean
                  errors:
                    type: array
                    items:
                      type: string

  /api/graph/validate/relationship:
    post:
      tags: [Validation]
      summary: Validate relationship
      description: Validate relationship before creation
      parameters:
        - name: from_entity_type
          in: query
          required: true
          description: Source entity type
          schema:
            type: string
        - name: to_entity_type
          in: query
          required: true
          description: Target entity type
          schema:
            type: string
        - name: relationship_type
          in: query
          required: true
          description: Relationship type
          schema:
            type: string
      responses:
        '200':
          description: Validation result
          content:
            application/json:
              schema:
                type: object
                properties:
                  valid:
                    type: boolean
                  errors:
                    type: array
                    items:
                      type: string

  # Entity Management Endpoints
  /api/graph/entities:
    post:
      tags: [Graph]
      summary: Create entity
      description: Create a new entity in the graph database
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EntityRequest'
      responses:
        '201':
          description: Entity created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityResponse'
        '400':
          description: Invalid entity data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    get:
      tags: [Graph]
      summary: List entities
      description: List entities with optional filtering
      parameters:
        - name: entity_type
          in: query
          required: false
          description: Filter by entity type
          schema:
            type: string
        - name: limit
          in: query
          required: false
          description: Maximum number of entities to return
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 100
      responses:
        '200':
          description: List of entities
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EntityResponse'

  /api/graph/entities/{entity_id}:
    get:
      tags: [Graph]
      summary: Get entity
      description: Get a specific entity by ID
      parameters:
        - name: entity_id
          in: path
          required: true
          description: Entity identifier
          schema:
            type: string
        - name: entity_type
          in: query
          required: true
          description: Entity type
          schema:
            type: string
      responses:
        '200':
          description: Entity details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityResponse'
        '404':
          description: Entity not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      tags: [Graph]
      summary: Update entity
      description: Update an existing entity
      parameters:
        - name: entity_id
          in: path
          required: true
          description: Entity identifier
          schema:
            type: string
        - name: entity_type
          in: query
          required: true
          description: Entity type
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                properties:
                  type: object
                  description: Properties to update
      responses:
        '200':
          description: Entity updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  entity_id:
                    type: string

    delete:
      tags: [Graph]
      summary: Delete entity
      description: Delete an entity from the graph database
      parameters:
        - name: entity_id
          in: path
          required: true
          description: Entity identifier
          schema:
            type: string
        - name: entity_type
          in: query
          required: true
          description: Entity type
          schema:
            type: string
      responses:
        '200':
          description: Entity deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  /api/graph/entities/{entity_id}/relationships:
    get:
      tags: [Graph]
      summary: Get entity relationships
      description: Get all relationships for a specific entity
      parameters:
        - name: entity_id
          in: path
          required: true
          description: Entity identifier
          schema:
            type: string
        - name: direction
          in: query
          required: false
          description: Direction of relationships
          schema:
            type: string
            enum: [incoming, outgoing, both]
            default: both
      responses:
        '200':
          description: Entity relationships
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RelationshipResponse'

  # Relationship Management Endpoints
  /api/graph/relationships:
    post:
      tags: [Graph]
      summary: Create relationship
      description: Create a new relationship between entities
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RelationshipRequest'
      responses:
        '201':
          description: Relationship created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RelationshipResponse'

    get:
      tags: [Graph]
      summary: List relationships
      description: List relationships with optional filtering
      parameters:
        - name: limit
          in: query
          required: false
          description: Maximum number of relationships to return
          schema:
            type: integer
            minimum: 1
            maximum: 100
      responses:
        '200':
          description: List of relationships
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RelationshipResponse'

  /api/graph/relationships/{relationship_id}:
    get:
      tags: [Graph]
      summary: Get relationship
      description: Get a specific relationship by ID
      parameters:
        - name: relationship_id
          in: path
          required: true
          description: Relationship identifier
          schema:
            type: string
      responses:
        '200':
          description: Relationship details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RelationshipResponse'

    put:
      tags: [Graph]
      summary: Update relationship
      description: Update an existing relationship
      parameters:
        - name: relationship_id
          in: path
          required: true
          description: Relationship identifier
          schema:
            type: string
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                properties:
                  type: object
                weight:
                  type: number
      responses:
        '200':
          description: Relationship updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

    delete:
      tags: [Graph]
      summary: Delete relationship
      description: Delete a relationship from the graph database
      parameters:
        - name: relationship_id
          in: path
          required: true
          description: Relationship identifier
          schema:
            type: string
      responses:
        '200':
          description: Relationship deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  # Statistics Endpoints
  /api/graph/stats:
    get:
      tags: [Statistics]
      summary: Get count statistics
      description: Get general count statistics for entities
      responses:
        '200':
          description: Count statistics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CountStatsResponse'

  /api/graph/stats/products:
    get:
      tags: [Statistics]
      summary: Get product count statistics
      description: Get product-specific count statistics
      responses:
        '200':
          description: Product count statistics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductCountStatsResponse'

  /api/graph/stats/categories:
    get:
      tags: [Statistics]
      summary: Get category count statistics
      description: Get category-based count statistics
      responses:
        '200':
          description: Category count statistics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryCountStatsResponse'

components:
  schemas:
    # Chat Request/Response Schemas
    UserLocation:
      type: object
      required:
        - lat
        - lon
      properties:
        lat:
          type: number
          description: Latitude
          minimum: -90
          maximum: 90
        lon:
          type: number
          description: Longitude
          minimum: -180
          maximum: 180

    ChatRequest:
      type: object
      required:
        - query
      properties:
        query:
          type: string
          description: User's question or search query
          minLength: 1
          example: "What are some easy chocolate chip cookie recipes?"
        session_id:
          type: string
          description: Optional session ID for conversation context
          example: "550e8400-e29b-41d4-a716-446655440000"
        content_type:
          type: string
          description: Filter by content type
          example: "recipe"
        brand:
          type: string
          description: Filter by brand
          example: "NESTEA"
        keywords:
          type: array
          items:
            type: string
          description: Filter by keywords
          example: ["chocolate", "cookies", "baking"]
        top_search_results:
          type: integer
          description: Number of search results to use as context
          minimum: 1
          maximum: 20
          default: 5
        user_location:
          $ref: '#/components/schemas/UserLocation'

    PurchaseAssistance:
      type: object
      properties:
        stores:
          type: array
          items:
            type: object
          description: Nearby stores that carry Nestlé products
        amazon_products:
          type: array
          items:
            type: object
          description: Amazon products matching the query

    ChatResponse:
      type: object
      properties:
        answer:
          type: string
          description: Generated response from the AI
          example: "Here are some delicious chocolate chip cookie recipes from Nestle..."
        sources:
          type: array
          items:
            type: object
          description: Source documents used to generate the response
        search_results_count:
          type: integer
          description: Number of search results found
          example: 5
        query:
          type: string
          description: Original user query
          example: "chocolate chip cookie recipes"
        session_id:
          type: string
          description: Session ID for this conversation
        filters_applied:
          type: object
          description: Filters that were applied to the search
        graphrag_enhanced:
          type: boolean
          description: Whether GraphRAG was used for enhanced context
        combined_relevance_score:
          type: number
          description: Combined relevance score for the response
        retrieval_metadata:
          type: object
          description: Metadata about the retrieval process
        is_purchase_query:
          type: boolean
          description: Whether this query was classified as a purchase query
        is_count_query:
          type: boolean
          description: Whether this query was classified as a count query
          default: false
        purchase_assistance:
          $ref: '#/components/schemas/PurchaseAssistance'
        count_data:
          type: object
          description: Count statistics data for count queries

    # Session Management Schemas
    SessionRequest:
      type: object
      properties:
        metadata:
          type: object
          description: Optional session metadata

    SessionResponse:
      type: object
      properties:
        session_id:
          type: string
          description: Session ID
        message:
          type: string
          description: Operation result message

    ConversationHistoryResponse:
      type: object
      properties:
        session_id:
          type: string
          description: Session ID
        messages:
          type: array
          items:
            type: object
          description: Conversation messages
        total_messages:
          type: integer
          description: Total number of messages in conversation

    # Graph Database Schemas
    ValidationRequest:
      type: object
      required:
        - entity_type
        - properties
      properties:
        entity_type:
          type: string
          description: Type of entity to validate
        properties:
          type: object
          description: Entity properties to validate
        is_user_created:
          type: boolean
          default: true
          description: Whether this is a user-created entity

    EntityRequest:
      type: object
      required:
        - entity_type
        - properties
      properties:
        entity_type:
          type: string
          enum: [Brand, Topic, Product, Recipe]
          description: Type of entity
        properties:
          type: object
          description: Entity-specific properties
        is_user_created:
          type: boolean
          default: true
          description: Whether this is a user-created entity

    EntityResponse:
      type: object
      properties:
        id:
          type: string
        entity_type:
          type: string
        properties:
          type: object
        is_user_created:
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    RelationshipRequest:
      type: object
      required:
        - from_entity_id
        - to_entity_id
        - relationship_type
      properties:
        from_entity_id:
          type: string
          description: Source entity ID
        to_entity_id:
          type: string
          description: Target entity ID
        relationship_type:
          type: string
          description: Type of relationship
        properties:
          type: object
          description: Relationship properties
          default: {}
        weight:
          type: number
          description: Relationship weight
          minimum: 0.0
          maximum: 1.0
          default: 1.0
        is_user_created:
          type: boolean
          default: true
          description: Whether this is a user-created relationship

    RelationshipResponse:
      type: object
      properties:
        id:
          type: string
        from_entity_id:
          type: string
        to_entity_id:
          type: string
        relationship_type:
          type: string
        properties:
          type: object
        weight:
          type: number
        is_user_created:
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    # Statistics Schemas
    CountStatsResponse:
      type: object
      properties:
        entity_counts:
          type: object
          additionalProperties:
            type: integer

    ProductCountStatsResponse:
      type: object
      properties:
        total_products:
          type: integer
        by_brand:
          type: object
          additionalProperties:
            type: integer

    CategoryCountStatsResponse:
      type: object
      properties:
        by_category:
          type: object
          additionalProperties:
            type: integer
        recipe_stats:
          type: object

    # Common Error Response
    ErrorResponse:
      type: object
      properties:
        detail:
          type: string
          description: Error message
          example: "Invalid request parameters"
        error_code:
          type: string
          description: Machine-readable error code
          example: "INVALID_PARAMETERS"
        timestamp:
          type: string
          format: date-time
          description: Error timestamp

  # Security Schemes (for future use)
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
      description: API key for authentication (not currently implemented)

# Global security (currently empty - no auth required)
security: [] 